/*
 * TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
 * Copyright (c) 2008, Nationwide Health Information Network (NHIN) Connect.
 * All rights reserved.Redistribution and use in source and binary forms,
 * with or without modification, are permitted provided that the following
 * conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 * - Neither the name of the NHIN Connect Project nor the names of its contributors
 * may be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
 * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *    END OF TERMS AND CONDITIONS
 */

package org.kmr2.mock;

import org.drools.mas.body.content.Action;
import org.drools.mas.*;

import gov.hhs.fha.nhinc.kmr2.clinicalAgent.models.risk.*;

import org.drools.informer.interaction.*;

import org.drools.informer.generator.Surveyable;

import org.drools.informer.generator.annotations.Questionable;
import org.drools.informer.generator.annotations.QuestionMark;
import org.drools.informer.generator.annotations.AllowedAnswers;

import org.drools.informer.generator.FormRegistry;

import org.mvel2.templates.*;

//import org.drools.dssagentserver.helpers.*;
import java.util.List;

import org.drools.informer.ProgressStatus;












declare PatientAcknowledgment extends Surveyable
@Questionable( label = "Please acknowledge the above message", language = "EN" )

    questionnaireId     : String

    ack                 : String
    @QuestionMark( type = Question.QuestionType.TYPE_TEXT, label = " Do you acknowledge the content above ? ", required = false )
    @AllowedAnswers( values = { "accept=Accept", "reject=Reject", "hold=Hold"  } )

end

declare ProviderAcknowledgment extends Surveyable
@Questionable( label = "Please acknowledge the above message", language = "EN" )

    questionnaireId     : String

    ack                 : String
    @QuestionMark( type = Question.QuestionType.TYPE_TEXT, label = " Do you acknowledge the content above ? ", required = false )
    @AllowedAnswers( values = { "accept=Accept", "reject=Reject", "hold=Hold", "ignore=Ignore", "escalate=Escalate"  } )

end


rule "Install"
salience 9999
when
then
    FormRegistry.register( PatientAcknowledgment.class );
    FormRegistry.register( ProviderAcknowledgment.class );
end















rule "At risk"
when
            RiskThreshold( $ctx : modelId, type == "Alert", $thold : threshold )
    $risk : RiskValue( context == $ctx, value > ($thold / 100.0) )
    ?patientName( $pat ; )
    ?userName( $pro ; )
then
    System.out.println(" AT RISK ------------ of " + $risk + " contact " + $pat + " and " + $pro );

    InteractionTicket ticket = new InteractionTicket( java.util.UUID.randomUUID().toString(),
                                                      new java.util.ArrayList(),
                                                      $risk );

    ticket.getInteractions().add( new Interaction( "org.kmr2.mock.PatientAcknowledgment",
                                                   "risk_alert.template",
                                                   new java.util.LinkedList( java.util.Arrays.asList( $pat, "99990061" ) ),
                                                   new java.util.LinkedList( java.util.Arrays.asList( "ALERT", "ALERT" ) ) ) );

    ticket.getInteractions().add( new Interaction( "org.kmr2.mock.ProviderAcknowledgment",
                                                   "risk_alert_prov.template",
                                                   new java.util.LinkedList( java.util.Arrays.asList( $pro, "2122" ) ),
                                                   new java.util.LinkedList( java.util.Arrays.asList( "ALERT", "SMS" ) ) ) );
    insert( ticket );
end














rule "Dispatch"
salience -200
when
    $ticket : InteractionTicket( $ticketId : id,
                                 $inters : interactions,
                                 $source : source  )
    $convo  : TicketActor( $convoId, $ticketId, $actorId ; )
    conversationForms( $ticketId, $actorId, $formIds, $bodies, $channels ; )
              eval( $formIds.size() > 0 )
              RiskValue( $value, $model ; ) from $source
    ?patientName( $pat ; )
    ?userName( $pro ; )
then
    System.out.println( " ******************************* Creating helper I " );
//    SynchronousRequestHelper helper = new SynchronousRequestHelper( new java.net.URL("TODO NEED THE EXACT URL") );
//    SynchronousRequestHelper helper = new SynchronousRequestHelper( new java.net.URL("http://184.191.173.235:8080/action-message-agent-service/service/SynchronousDroolsAgentService?WSDL") );

    int risk = (int) Math.round(100*$value);
    String body = "";
    for ( int j = 0; j < $formIds.size(); j ++ ) {
        java.util.Map vars = new java.util.HashMap(10);
        vars.put("title", $model );
        vars.put("patient", $pat );
        vars.put("disease", $model );
        vars.put("risk", risk );
        vars.put("provider", $pro );
        vars.put("nonRisk", 100-risk );
        vars.put("surveyId", $formIds.get(j) );

        CompiledTemplate template = (CompiledTemplate)  gov.hhs.fha.nhinc.kmr2.TemplateBuilder.getRegistry().getNamedTemplate( (String) $bodies.get(j) );
        body += ( TemplateRuntime.execute ( template, null, vars ).toString() );
    }

    java.util.LinkedHashMap map = new java.util.LinkedHashMap();
    map.put("refId", $ticketId );
    map.put("conversationId", $convoId );
    map.put("subjectAbout", new String[] { $pat, $pro, $actorId } );          // Array of ids, current alert creation will grab the first id as the ptUnitNumber.
    map.put("sender", $pro );                // id
    map.put("mainRecipients", new String[] { $actorId } );         // Array of Ids
    map.put("secondaryRecipients", new String[0] );    // Array of Ids
    map.put("hiddenRecipients", new String[0] );       // Array of Ids
    map.put("type", $channels.get(0) );
    map.put("header", "Risk threshold exceeded : " + $model + "(" + risk + "%)" );
    map.put("body", body );
    map.put("priority", "Critical" );
    map.put("deliveryDate", new java.util.Date() );
    map.put("status", "New" );                         // [ "New" | "Read" | "Unread" | "Escalated" | ... ]

    System.out.println(map);


    System.out.println( " ******************************* Deliver to " + $actorId + "  : >> " + $formIds + " in " + $convo + " using " + $channels.get(0) );
//    helper.invokeRequest("deliverMessage",map);
end






rule "Update state"
salience -200
when
    $ticket : InteractionTicket( $ticketId : id,
                                 $inters : interactions,
                                 $source : source  )
    $convo  : TicketActor( $convoId, $ticketId, $actorId ; )
    conversationForms( $ticketId, $actorId, $formIds, $bodies ; )
    List( $numComplete : size > 0 ) from accumulate (
            $p : ProgressStatus( formId memberOf $formIds, $x : percentage == 100 )
            collectList( $p )
        )
    ?patientName( $pat ; )
    ?userName( $pro ; )
then
    int ratio = 100 * $numComplete / $formIds.size();
    System.out.println( " ******************************* Creating helper II " );
//    SynchronousRequestHelper helper = new SynchronousRequestHelper( new java.net.URL("http://184.191.173.235:8080/action-message-agent-service/service/SynchronousDroolsAgentService?WSDL") );
//
//
    java.util.LinkedHashMap map = new java.util.LinkedHashMap();
    map.put("refId", $ticketId );
    map.put("conversationId", $convoId );
    map.put("subjectAbout", new String[] { $pat, $pro, $actorId } );          // Array of ids, current alert creation will grab the first id as the ptUnitNumber.
    map.put("sender", $pro );                // id
    map.put("mainRecipients", new String[] { $actorId } );         // Array of Ids
    map.put("secondaryRecipients", new String[0] );    // Array of Ids
    map.put("hiddenRecipients", new String[0] );       // Array of Ids
    map.put("type", "UPDATE" );
    map.put("header", null );
    map.put("body", null );
    map.put("priority", "Critical" );
    map.put("deliveryDate", new java.util.Date() );
    map.put("status", ratio );                 // [ "New" | "Read" | "Unread" | "Escalated" | ... ]

//    System.out.println(map);

    System.out.println( " ******************************* On progressStatus to " + $actorId + "  : >> " + $formIds + " in " + $convo + " ////  " +  ratio );
//    helper.invokeRequest("deliverMessage",map);
end








rule "Escalation"
when
    $ticket : InteractionTicket( $id : id,
                                 $inters : interactions )
    $inter : Interaction( $type, $body, $receivers, $channels ;)
    FormMarker( $id, $type, $formId ; )
    $al : Alert( $id, $dest, $formId, $channel ; destination memberOf $receivers )
    not org.drools.informer.Progress( $formId, 100 ; this after[0,4s] $al )
then
    System.out.println( $dest + " did not answer " + $al );
    retract( $al );
    $receivers.remove( 0 );
    $channels.remove( 0 );
    System.out.println( " Interaction is NOW " + $inter );
    update( $inter );
end


rule "Completion"
when
    $al : Alert( $id, $dest, $formId, $channel ; )
    org.drools.informer.Progress( $formId, 100 ; this after[0,4s] $al )
then
    System.out.println(" RETRACT!! " + $dest );
    retract( $al );
end









