/*
 * TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
 * Copyright (c) 2008, Nationwide Health Information Network (NHIN) Connect.
 * All rights reserved.Redistribution and use in source and binary forms,
 * with or without modification, are permitted provided that the following
 * conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 * - Neither the name of the NHIN Connect Project nor the names of its contributors
 * may be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
 * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *    END OF TERMS AND CONDITIONS
 */
package org.kmr2.mock;

import org.drools.mas.body.content.Action;
import org.drools.mas.*;

import org.drools.interaction.*;

import org.drools.informer.generator.Surveyable;

import org.drools.informer.generator.annotations.Questionable;
import org.drools.informer.generator.annotations.QuestionMark;
import org.drools.informer.generator.annotations.AllowedAnswers;

import org.drools.informer.generator.FormRegistry;


import org.drools.dssagentserver.helpers.*;
import java.util.List;

import org.kmr2.risk.*;


declare PatientInfo
    patientName : String    @key
end

declare UserInfo
    userName : String   @key
end



query patientName( String $pat )
    PatientInfo( $pat := patientName )
end


query userName( String $pro )
    UserInfo( $pro := userName )
end





//
//
//declare PatientAcknowledgment extends Surveyable
//@Questionable( label = "Please acknowledge the above message", language = "EN" )
//
//    questionnaireId     : String
//
//    ack                 : String
//    @QuestionMark( type = Question.QuestionType.TYPE_TEXT, label = " Do you acknowledge the content above ? ", required = false )
//    @AllowedAnswers( values = { "accept=Accept", "reject=Reject", "hold=Hold"  } )
//
//end
//
//declare ProviderAcknowledgment extends Surveyable
//@Questionable( label = "Please acknowledge the above message", language = "EN" )
//
//    questionnaireId     : String
//
//    ack                 : String
//    @QuestionMark( type = Question.QuestionType.TYPE_TEXT, label = " Do you acknowledge the content above ? ", required = false )
//    @AllowedAnswers( values = { "accept=Accept", "reject=Reject", "hold=Hold", "ignore=Ignore", "escalate=Escalate"  } )
//
//end
//
//
//rule "Install"
//salience 9999
//when
//then
//    FormRegistry.register( PatientAcknowledgment.class );
//    FormRegistry.register( ProviderAcknowledgment.class );
//end









rule "Clear pat"
when
    $act : Action( $prov : this["userId"] != null, $pat : this["patientId"] )
    $pin : PatientInfo( patientName != $pat )
then
    retract( $pin );
end

rule "Clear pro"
when
    $act : Action( $prov : this["userId"] != null, $pat : this["patientId"] )
    $pin : UserInfo( userName != $prov )
then
    retract( $pin );
end

rule "Update pat"
when
    $act : Action( $prov : this["userId"] != null, $pat : this["patientId"] )
then
    insert( new UserInfo( (String) $prov ) );
    insert( new PatientInfo( (String) $pat ) );
end


//
//rule "At risk"
//when
//            RiskThreshold( $ctx : modelId, $thold : threshold )
//    $risk : RiskValue( context == $ctx, value > ($thold / 100.0) )
//    ?patientName( $pat ; )
//    ?userName( $pro ; )
//then
//    System.err.println(" AT RISK ------------ of " + $ctx + " contact " + $pat + " and " + $pro );
//
//    InteractionTicket ticket = new InteractionTicket( java.util.UUID.randomUUID().toString(),
//                                                      new java.util.ArrayList(),
//                                                      $risk );
//
//    System.out.println("Just created a ticket " + ticket );
//
//    ticket.getInteractions().add( new Interaction( "org.kmr2.mock.PatientAcknowledgment",
//                                                    new java.util.LinkedList( java.util.Arrays.asList( $pat ) ) ) );
//    ticket.getInteractions().add( new Interaction( "org.kmr2.mock.ProviderAcknowledgment",
//                                                    new java.util.LinkedList( java.util.Arrays.asList( $pro, "eafry" ) ) ) );
//    insert( ticket );
//end
//
//
//
//






/*

declare EMRToken
    id : String
end

rule "EMR"
salience 99999999
when
    FactType( $patientId : patientId.value )
    not EMRToken( id == $patientId )
then
    System.out.println( " << Initializing session >> " );
    // factService.load( $patientId )
    insert( new EMRToken( $patientId ) );
end


rule "LogEMR"
when
    EMRToken( $patientId : id )
then
    System.out.println(" << Session initialized for patient " + $patientId + " >>");
end
*/




















//rule "Dispatch"
//salience -200
//when
//    $ticket : InteractionTicket( $ticketId : id,
//                                 $inters : interactions,
//                                 $source : source  )
//    $convo  : TicketActor( $convoId, $ticketId, $actorId ; )
//    ?conversationForms( $ticketId, $actorId, $list ; )
//              RiskValue( $model, $value ; ) from $source
//    ?patientName( $pat ; )
//    ?userName( $pro ; )
//then
//    System.out.println( " ******************************* Deliver to " + $actorId + "  : >> " + $list + " in " + $convo );
////    SynchronousRequestHelper helper = new SynchronousRequestHelper( new java.net.URL("TODO NEED THE EXACT URL") );
//
//    java.util.LinkedHashMap map = new java.util.LinkedHashMap();
//    map.put("refId", $ticketId );
//    map.put("conversationId", $convoId );
//    map.put("subjectAbout", new String[] { $pat, $pro } );          // Array of ids, current alert creation will grab the first id as the ptUnitNumber.
//    map.put("sender", $pro );                // id
//    map.put("mainRecipients", new String[] { $actorId } );         // Array of Ids
//    map.put("secondaryRecipients", new String[0] );    // Array of Ids
//    map.put("hiddenRecipients", new String[0] );       // Array of Ids
//    map.put("type", "ALERT" );
//    map.put("header", "Risk threshold exceeded : " + $model );
//    map.put("body", "You are in trouble " + $value );
//    map.put("priority", "Critical" );
//    map.put("deliveryDate", new java.util.Date() );
//    map.put("status", "New" );                 // [ "New" | "Read" | "Unread" | "Escalated" | ... ]
//
//    System.out.println( map );
//
//
////    helper.invokeRequest("deliverMessage",args);
//end
////
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//








