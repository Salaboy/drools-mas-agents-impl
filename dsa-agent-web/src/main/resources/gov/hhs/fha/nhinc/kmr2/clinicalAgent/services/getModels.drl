/*
 * TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
 * Copyright (c) 2008, Nationwide Health Information Network (NHIN) Connect.
 * All rights reserved.Redistribution and use in source and binary forms,
 * with or without modification, are permitted provided that the following
 * conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 * - Neither the name of the NHIN Connect Project nor the names of its contributors
 * may be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
 * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *    END OF TERMS AND CONDITIONS
 */

 package gov.hhs.fha.nhinc.kmr2.clinicalAgent.services;

import org.drools.io.internal.InternalResource;
import java.util.List;
import java.util.ArrayList;

import org.drools.pmml_4_0.ModelMarker;




declare ModelElement
    modelId             : String    @key
    tags                : ArrayList @key
    title               : String
    disease             : String
    displayThreshold    : int
end

declare ModelList
    patientId           : String    @key
    tags                : ArrayList @key
    models              : List
    successStatus       : boolean
    successMessage      : String
end



rule "Action_Request : getRiskModels Init"
salience 10
when
    $a :  Action( actionName == "getRiskModels",
                  $userId    : this["userId"],
                  $patientId : this["patientId"]
                )
    not   ModelList( $patientId, $tags == ["Risk"]; )
then
    insert( new ModelList( (String) $patientId, new ArrayList( java.util.Arrays.asList("Risk") ), null, true, "(ok)" ) );
end


rule "Action_Request : getModels Init"
salience 10
when
    $a :  Action( actionName == "getModels",
                  $userId    : this["userId"],
                  $tags      : this["types"],
                  $patientId : this["patientId"]
                )
    not   ModelList( $patientId, $tags; )
then
    insert( new ModelList( (String) $patientId, new ArrayList( (List) $tags ), null, true, "(ok)" ) );
end




rule "Action_Request : getModels Clear"
when
    $a :  Action( actionName == "getModels" || == "getRiskModels" )
then
    retract( $a );
end



rule "Combine with threshold"
when
    InternalResource( $id : name, $type : description, $tags : categories  )
    RiskThreshold( modelId == $id, type == "Display", $thold : threshold )
then
    insertLogical( new ModelElement( $id, new ArrayList($tags), $type, $type, $thold ) );
end

rule "Default threshold"
when
    InternalResource( $id : name, $type : description, $tags : categories )
    not RiskThreshold( modelId == $id, type == "Display" )
    ?defaultRiskThreshold( $def ; )
then
    insertLogical( new ModelElement( $id, new ArrayList($tags), $type, $type, $def ) );
end


rule "Listing"
when
    $ml : ModelList( $queryTags : tags )
    $list : List( $num : size ) from accumulate (
        $m : ModelElement( tags.containsAll($queryTags) )
        collectList( $m )
    )

then
    $ml.setModels( new ArrayList( $list ) );
end


query getModels( String $userId, String $patientId, List $types, Object $return )
    $return := ModelList( patientId == $patientId, tags == $types )
end

query getRiskModels( String $userId, String $patientId, Object $return )
    $return := ModelList( patientId == $patientId, tags == ["Risk"] )
end


rule "LogMDL"
when
    $m : ModelList()
then
    System.out.println(">>>>" + $m);
end