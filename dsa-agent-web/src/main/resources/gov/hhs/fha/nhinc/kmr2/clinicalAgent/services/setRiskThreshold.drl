/*
 * TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
 * Copyright (c) 2008, Nationwide Health Information Network (NHIN) Connect.
 * All rights reserved.Redistribution and use in source and binary forms,
 * with or without modification, are permitted provided that the following
 * conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 * - Neither the name of the NHIN Connect Project nor the names of its contributors
 * may be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
 * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *    END OF TERMS AND CONDITIONS
 */

package gov.hhs.fha.nhinc.kmr2.clinicalAgent.services;

import gov.hhs.fha.nhinc.kmr2.clinicalAgent.models.risk.*;
import org.drools.mas.body.content.Action;

import org.drools.pmml_4_0.ModelMarker;



rule "Action_Request : setRiskThreshold"
when
    $a : Action( actionName == "setRiskThreshold",
                 $userId    : this["userId"],
                 $patientId : this["patientId"],
                 $modelId   : this["modelId"],
                 $type      : this["type"],
                 $value     : this["threshold"]
               )
    $h : RiskThreshold( modelId == $modelId, type == $type, threshold != (Integer) $value  )
then
    retract( $a );
    $h.setThreshold( (Integer) $value  );
    update($h);
    System.err.println(" Updateing " + $h );
end

rule "Action_Request : setRiskThreshold II"
when
    $a : Action( actionName == "setRiskThreshold",
                 $userId    : this["userId"],
                 $patientId : this["patientId"],
                 $modelId   : this["modelId"],
                 $type      : this["type"],
                 $value     : this["threshold"]
               )
    not  RiskThreshold( modelId == $modelId, type == $type )
then
    insert( new RiskThreshold( (String) $modelId, (String) $type, (Integer) $value ) );
    retract( $a );
end






rule "Support Threshold"
when
    ModelMarker( $mid : modelName );
    not RiskThreshold( modelId == $mid, type == "Alert" )
    ?defaultRiskThreshold( $def ; )
then
    insert( new RiskThreshold( $mid, "Alert", $def ) );
end

rule "Clean Threshold"
when
    $risk : RiskThreshold( $mid : modelId )
    not InternalResource( name == $mid )
then
    retract( $risk );
end




query setRiskThreshold( String $userId, String $patientId, String $modelId, String $type, Integer $threshold, int $return )
    RiskThreshold( $modelId, $type, $return ; )
end
