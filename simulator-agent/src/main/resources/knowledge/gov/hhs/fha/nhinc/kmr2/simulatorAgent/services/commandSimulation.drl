/*
 * TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
 * Copyright (c) 2008, Nationwide Health Information Network (NHIN) Connect.
 * All rights reserved.Redistribution and use in source and binary forms,
 * with or without modification, are permitted provided that the following
 * conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * - Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 * - Neither the name of the NHIN Connect Project nor the names of its contributors
 * may be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
 * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *    END OF TERMS AND CONDITIONS
 */

package gov.hhs.fha.nhinc.kmr2.simulatorAgent.services;

import org.drools.io.internal.InternalResource;

import org.drools.mas.body.content.Action;
import java.util.List;
import java.util.Date;
import java.util.ArrayList;


declare SimCommand
    simId           : String
    successStatus   : boolean   = true;
    statusMessage   : String    = "(ok)"
end


rule "Action_Request : commandSimulation Init"
salience 20
when
    $a :  Action( actionName == "commandSimulation",
                  $userId               : this["userId"],
                  $modelId              : this["modelId"],
                  $simulationId         : this["simulationId"],
                  $action               : this["action"]
                )
    not SimCommand()
then
    insert( new SimCommand() );
end


rule "Action_Request : commandSimulation Fail"
salience 10
no-loop
when
    $a :  Action( actionName == "commandSimulation",
                   $userId               : this["userId"],
                   $modelId              : this["modelId"],
                   $simulationId         : this["simulationId"],
                   $action               : this["action"]
                 )
    not    Simulation( simulationId == $simulationId )
    $cmd : SimCommand( )
then
    retract( $a );

    System.err.println("Cmd Sim : Fail");
    $cmd.setSimId( (String) $simulationId );
    $cmd.setSuccessStatus( false );
    $cmd.setStatusMessage( "Sim not found " + $simulationId );
    update( $cmd );
end



rule "Action_Request : commandSimulation Pause"
salience 10
no-loop
when
    $a :  Action( actionName == "commandSimulation",
                   $userId               : this["userId"],
                   $modelId              : this["modelId"],
                   $simulationId         : this["simulationId"],
                   $action               : this["action"] == "Pause"
                 )
    $sim : Simulation( simulationId == $simulationId, status == "Running" )
    $cmd : SimCommand( )
then
    retract( $a );

    System.err.println("Cmd Sim : Pause");
    $sim.pause();

    $cmd.setSimId( (String) $simulationId );
    $cmd.setSuccessStatus( true );
    $cmd.setStatusMessage( "(ok)" );

    update( $sim );
    update( $cmd );
end

rule "Action_Request : commandSimulation Pause not necessary"
salience 10
no-loop
when
    $a :  Action( actionName == "commandSimulation",
                   $userId               : this["userId"],
                   $modelId              : this["modelId"],
                   $simulationId         : this["simulationId"],
                   $action               : this["action"] == "Pause"
                 )
    $sim : Simulation( simulationId == $simulationId, status != "Running" )
    $cmd : SimCommand( )
then
    retract( $a );

    System.err.println("Cmd Sim : Pause not nec");

    $cmd.setSimId( (String) $simulationId );
    $cmd.setSuccessStatus( false );
    $cmd.setStatusMessage( "Sim not running " + $simulationId );

    update( $cmd );
end





rule "Action_Request : commandSimulation Start"
salience 10
no-loop
when
    $a :  Action( actionName == "commandSimulation",
                   $userId               : this["userId"],
                   $modelId              : this["modelId"],
                   $simulationId         : this["simulationId"],
                   $action               : this["action"] == "Start"
                 )
    $sim : Simulation( simulationId == $simulationId, status == "Paused" )
    $cmd : SimCommand( )
then
    retract( $a );

    System.err.println("Cmd Sim : Start");
    $sim.start();

    $cmd.setSimId( (String) $simulationId );
    $cmd.setSuccessStatus( true );
    $cmd.setStatusMessage( "(ok)" );

    update( $sim );
    update( $cmd );
end

rule "Action_Request : commandSimulation Start not necessary"
salience 10
no-loop
when
    $a :  Action( actionName == "commandSimulation",
                   $userId               : this["userId"],
                   $modelId              : this["modelId"],
                   $simulationId         : this["simulationId"],
                   $action               : this["action"] == "Start"
                 )
    $sim : Simulation( simulationId == $simulationId, status != "Paused" )
    $cmd : SimCommand( )
then
    retract( $a );

    System.err.println("Cmd Sim : Start not nec");

    $cmd.setSimId( (String) $simulationId );
    $cmd.setSuccessStatus( false );
    $cmd.setStatusMessage( "Sim not paused " + $simulationId );

    update( $cmd );
end






rule "Action_Request : commandSimulation Stop"
salience 10
no-loop
when
    $a :  Action( actionName == "commandSimulation",
                   $userId               : this["userId"],
                   $modelId              : this["modelId"],
                   $simulationId         : this["simulationId"],
                   $action               : this["action"] == "Stop"
                 )
    $sim : Simulation( simulationId == $simulationId )
    $cmd : SimCommand( )
then
    retract( $a );

    System.err.println("Cmd Sim : Stop");
    $sim.stop();

    $cmd.setSimId( (String) $simulationId );
    $cmd.setSuccessStatus( true );
    $cmd.setStatusMessage( "(ok)" );

    update( $sim );
    update( $cmd );
end



rule "Action_Request : commandSimulation Clear"
when
    $a :  Action( actionName == "commandSimulation" )
then
    retract( $a );
end




query commandSimulation( String $userId, String $modelId, String $simId, String $action, Object $return )
    $return := SimCommand( )
end